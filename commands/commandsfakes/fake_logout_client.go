// Code generated by counterfeiter. DO NOT EDIT.
package commandsfakes

import (
	"sync"

	"github.com/pivotal-cf/pivnet-cli/commands"
)

type FakeLogoutClient struct {
	LogoutStub        func(profileName string) error
	logoutMutex       sync.RWMutex
	logoutArgsForCall []struct {
		profileName string
	}
	logoutReturns struct {
		result1 error
	}
	logoutReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogoutClient) Logout(profileName string) error {
	fake.logoutMutex.Lock()
	ret, specificReturn := fake.logoutReturnsOnCall[len(fake.logoutArgsForCall)]
	fake.logoutArgsForCall = append(fake.logoutArgsForCall, struct {
		profileName string
	}{profileName})
	fake.recordInvocation("Logout", []interface{}{profileName})
	fake.logoutMutex.Unlock()
	if fake.LogoutStub != nil {
		return fake.LogoutStub(profileName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.logoutReturns.result1
}

func (fake *FakeLogoutClient) LogoutCallCount() int {
	fake.logoutMutex.RLock()
	defer fake.logoutMutex.RUnlock()
	return len(fake.logoutArgsForCall)
}

func (fake *FakeLogoutClient) LogoutArgsForCall(i int) string {
	fake.logoutMutex.RLock()
	defer fake.logoutMutex.RUnlock()
	return fake.logoutArgsForCall[i].profileName
}

func (fake *FakeLogoutClient) LogoutReturns(result1 error) {
	fake.LogoutStub = nil
	fake.logoutReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLogoutClient) LogoutReturnsOnCall(i int, result1 error) {
	fake.LogoutStub = nil
	if fake.logoutReturnsOnCall == nil {
		fake.logoutReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.logoutReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLogoutClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.logoutMutex.RLock()
	defer fake.logoutMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLogoutClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.LogoutClient = new(FakeLogoutClient)
