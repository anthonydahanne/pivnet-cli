// Code generated by counterfeiter. DO NOT EDIT.
package imagereferencefakes

import (
	"sync"

	"github.com/pivotal-cf/go-pivnet/v2"
	"github.com/pivotal-cf/pivnet-cli/commands/imagereference"
)

type FakePivnetClient struct {
	CreateImageReferenceStub        func(config pivnet.CreateImageReferenceConfig) (pivnet.ImageReference, error)
	createImageReferenceMutex       sync.RWMutex
	createImageReferenceArgsForCall []struct {
		config pivnet.CreateImageReferenceConfig
	}
	createImageReferenceReturns struct {
		result1 pivnet.ImageReference
		result2 error
	}
	createImageReferenceReturnsOnCall map[int]struct {
		result1 pivnet.ImageReference
		result2 error
	}
	DeleteImageReferenceStub        func(productSlug string, releaseID int) (pivnet.ImageReference, error)
	deleteImageReferenceMutex       sync.RWMutex
	deleteImageReferenceArgsForCall []struct {
		productSlug string
		releaseID   int
	}
	deleteImageReferenceReturns struct {
		result1 pivnet.ImageReference
		result2 error
	}
	deleteImageReferenceReturnsOnCall map[int]struct {
		result1 pivnet.ImageReference
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePivnetClient) CreateImageReference(config pivnet.CreateImageReferenceConfig) (pivnet.ImageReference, error) {
	fake.createImageReferenceMutex.Lock()
	ret, specificReturn := fake.createImageReferenceReturnsOnCall[len(fake.createImageReferenceArgsForCall)]
	fake.createImageReferenceArgsForCall = append(fake.createImageReferenceArgsForCall, struct {
		config pivnet.CreateImageReferenceConfig
	}{config})
	fake.recordInvocation("CreateImageReference", []interface{}{config})
	fake.createImageReferenceMutex.Unlock()
	if fake.CreateImageReferenceStub != nil {
		return fake.CreateImageReferenceStub(config)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createImageReferenceReturns.result1, fake.createImageReferenceReturns.result2
}

func (fake *FakePivnetClient) CreateImageReferenceCallCount() int {
	fake.createImageReferenceMutex.RLock()
	defer fake.createImageReferenceMutex.RUnlock()
	return len(fake.createImageReferenceArgsForCall)
}

func (fake *FakePivnetClient) CreateImageReferenceArgsForCall(i int) pivnet.CreateImageReferenceConfig {
	fake.createImageReferenceMutex.RLock()
	defer fake.createImageReferenceMutex.RUnlock()
	return fake.createImageReferenceArgsForCall[i].config
}

func (fake *FakePivnetClient) CreateImageReferenceReturns(result1 pivnet.ImageReference, result2 error) {
	fake.CreateImageReferenceStub = nil
	fake.createImageReferenceReturns = struct {
		result1 pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) CreateImageReferenceReturnsOnCall(i int, result1 pivnet.ImageReference, result2 error) {
	fake.CreateImageReferenceStub = nil
	if fake.createImageReferenceReturnsOnCall == nil {
		fake.createImageReferenceReturnsOnCall = make(map[int]struct {
			result1 pivnet.ImageReference
			result2 error
		})
	}
	fake.createImageReferenceReturnsOnCall[i] = struct {
		result1 pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) DeleteImageReference(productSlug string, releaseID int) (pivnet.ImageReference, error) {
	fake.deleteImageReferenceMutex.Lock()
	ret, specificReturn := fake.deleteImageReferenceReturnsOnCall[len(fake.deleteImageReferenceArgsForCall)]
	fake.deleteImageReferenceArgsForCall = append(fake.deleteImageReferenceArgsForCall, struct {
		productSlug string
		releaseID   int
	}{productSlug, releaseID})
	fake.recordInvocation("DeleteImageReference", []interface{}{productSlug, releaseID})
	fake.deleteImageReferenceMutex.Unlock()
	if fake.DeleteImageReferenceStub != nil {
		return fake.DeleteImageReferenceStub(productSlug, releaseID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteImageReferenceReturns.result1, fake.deleteImageReferenceReturns.result2
}

func (fake *FakePivnetClient) DeleteImageReferenceCallCount() int {
	fake.deleteImageReferenceMutex.RLock()
	defer fake.deleteImageReferenceMutex.RUnlock()
	return len(fake.deleteImageReferenceArgsForCall)
}

func (fake *FakePivnetClient) DeleteImageReferenceArgsForCall(i int) (string, int) {
	fake.deleteImageReferenceMutex.RLock()
	defer fake.deleteImageReferenceMutex.RUnlock()
	return fake.deleteImageReferenceArgsForCall[i].productSlug, fake.deleteImageReferenceArgsForCall[i].releaseID
}

func (fake *FakePivnetClient) DeleteImageReferenceReturns(result1 pivnet.ImageReference, result2 error) {
	fake.DeleteImageReferenceStub = nil
	fake.deleteImageReferenceReturns = struct {
		result1 pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) DeleteImageReferenceReturnsOnCall(i int, result1 pivnet.ImageReference, result2 error) {
	fake.DeleteImageReferenceStub = nil
	if fake.deleteImageReferenceReturnsOnCall == nil {
		fake.deleteImageReferenceReturnsOnCall = make(map[int]struct {
			result1 pivnet.ImageReference
			result2 error
		})
	}
	fake.deleteImageReferenceReturnsOnCall[i] = struct {
		result1 pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createImageReferenceMutex.RLock()
	defer fake.createImageReferenceMutex.RUnlock()
	fake.deleteImageReferenceMutex.RLock()
	defer fake.deleteImageReferenceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePivnetClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ imagereference.PivnetClient = new(FakePivnetClient)
