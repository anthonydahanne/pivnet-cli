// Code generated by counterfeiter. DO NOT EDIT.
package rcfakes

import (
	"sync"

	"github.com/pivotal-cf/pivnet-cli/rc"
)

type FakePivnetRCReadWriter struct {
	WriteToFileStub        func(contents []byte) error
	writeToFileMutex       sync.RWMutex
	writeToFileArgsForCall []struct {
		contents []byte
	}
	writeToFileReturns struct {
		result1 error
	}
	writeToFileReturnsOnCall map[int]struct {
		result1 error
	}
	ReadFromFileStub        func() ([]byte, error)
	readFromFileMutex       sync.RWMutex
	readFromFileArgsForCall []struct{}
	readFromFileReturns     struct {
		result1 []byte
		result2 error
	}
	readFromFileReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePivnetRCReadWriter) WriteToFile(contents []byte) error {
	var contentsCopy []byte
	if contents != nil {
		contentsCopy = make([]byte, len(contents))
		copy(contentsCopy, contents)
	}
	fake.writeToFileMutex.Lock()
	ret, specificReturn := fake.writeToFileReturnsOnCall[len(fake.writeToFileArgsForCall)]
	fake.writeToFileArgsForCall = append(fake.writeToFileArgsForCall, struct {
		contents []byte
	}{contentsCopy})
	fake.recordInvocation("WriteToFile", []interface{}{contentsCopy})
	fake.writeToFileMutex.Unlock()
	if fake.WriteToFileStub != nil {
		return fake.WriteToFileStub(contents)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.writeToFileReturns.result1
}

func (fake *FakePivnetRCReadWriter) WriteToFileCallCount() int {
	fake.writeToFileMutex.RLock()
	defer fake.writeToFileMutex.RUnlock()
	return len(fake.writeToFileArgsForCall)
}

func (fake *FakePivnetRCReadWriter) WriteToFileArgsForCall(i int) []byte {
	fake.writeToFileMutex.RLock()
	defer fake.writeToFileMutex.RUnlock()
	return fake.writeToFileArgsForCall[i].contents
}

func (fake *FakePivnetRCReadWriter) WriteToFileReturns(result1 error) {
	fake.WriteToFileStub = nil
	fake.writeToFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePivnetRCReadWriter) WriteToFileReturnsOnCall(i int, result1 error) {
	fake.WriteToFileStub = nil
	if fake.writeToFileReturnsOnCall == nil {
		fake.writeToFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeToFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePivnetRCReadWriter) ReadFromFile() ([]byte, error) {
	fake.readFromFileMutex.Lock()
	ret, specificReturn := fake.readFromFileReturnsOnCall[len(fake.readFromFileArgsForCall)]
	fake.readFromFileArgsForCall = append(fake.readFromFileArgsForCall, struct{}{})
	fake.recordInvocation("ReadFromFile", []interface{}{})
	fake.readFromFileMutex.Unlock()
	if fake.ReadFromFileStub != nil {
		return fake.ReadFromFileStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.readFromFileReturns.result1, fake.readFromFileReturns.result2
}

func (fake *FakePivnetRCReadWriter) ReadFromFileCallCount() int {
	fake.readFromFileMutex.RLock()
	defer fake.readFromFileMutex.RUnlock()
	return len(fake.readFromFileArgsForCall)
}

func (fake *FakePivnetRCReadWriter) ReadFromFileReturns(result1 []byte, result2 error) {
	fake.ReadFromFileStub = nil
	fake.readFromFileReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetRCReadWriter) ReadFromFileReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.ReadFromFileStub = nil
	if fake.readFromFileReturnsOnCall == nil {
		fake.readFromFileReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.readFromFileReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetRCReadWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.writeToFileMutex.RLock()
	defer fake.writeToFileMutex.RUnlock()
	fake.readFromFileMutex.RLock()
	defer fake.readFromFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePivnetRCReadWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rc.PivnetRCReadWriter = new(FakePivnetRCReadWriter)
