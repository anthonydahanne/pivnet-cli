// Code generated by counterfeiter. DO NOT EDIT.
package releasedependencyfakes

import (
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet/v6"
	"github.com/pivotal-cf/pivnet-cli/commands/releasedependency"
)

type FakePivnetClient struct {
	AddReleaseDependencyStub        func(string, int, int) error
	addReleaseDependencyMutex       sync.RWMutex
	addReleaseDependencyArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 int
	}
	addReleaseDependencyReturns struct {
		result1 error
	}
	addReleaseDependencyReturnsOnCall map[int]struct {
		result1 error
	}
	ReleaseDependenciesStub        func(string, int) ([]pivnet.ReleaseDependency, error)
	releaseDependenciesMutex       sync.RWMutex
	releaseDependenciesArgsForCall []struct {
		arg1 string
		arg2 int
	}
	releaseDependenciesReturns struct {
		result1 []pivnet.ReleaseDependency
		result2 error
	}
	releaseDependenciesReturnsOnCall map[int]struct {
		result1 []pivnet.ReleaseDependency
		result2 error
	}
	ReleaseForVersionStub        func(string, string) (pivnet.Release, error)
	releaseForVersionMutex       sync.RWMutex
	releaseForVersionArgsForCall []struct {
		arg1 string
		arg2 string
	}
	releaseForVersionReturns struct {
		result1 pivnet.Release
		result2 error
	}
	releaseForVersionReturnsOnCall map[int]struct {
		result1 pivnet.Release
		result2 error
	}
	RemoveReleaseDependencyStub        func(string, int, int) error
	removeReleaseDependencyMutex       sync.RWMutex
	removeReleaseDependencyArgsForCall []struct {
		arg1 string
		arg2 int
		arg3 int
	}
	removeReleaseDependencyReturns struct {
		result1 error
	}
	removeReleaseDependencyReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePivnetClient) AddReleaseDependency(arg1 string, arg2 int, arg3 int) error {
	fake.addReleaseDependencyMutex.Lock()
	ret, specificReturn := fake.addReleaseDependencyReturnsOnCall[len(fake.addReleaseDependencyArgsForCall)]
	fake.addReleaseDependencyArgsForCall = append(fake.addReleaseDependencyArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	fake.recordInvocation("AddReleaseDependency", []interface{}{arg1, arg2, arg3})
	fake.addReleaseDependencyMutex.Unlock()
	if fake.AddReleaseDependencyStub != nil {
		return fake.AddReleaseDependencyStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addReleaseDependencyReturns
	return fakeReturns.result1
}

func (fake *FakePivnetClient) AddReleaseDependencyCallCount() int {
	fake.addReleaseDependencyMutex.RLock()
	defer fake.addReleaseDependencyMutex.RUnlock()
	return len(fake.addReleaseDependencyArgsForCall)
}

func (fake *FakePivnetClient) AddReleaseDependencyCalls(stub func(string, int, int) error) {
	fake.addReleaseDependencyMutex.Lock()
	defer fake.addReleaseDependencyMutex.Unlock()
	fake.AddReleaseDependencyStub = stub
}

func (fake *FakePivnetClient) AddReleaseDependencyArgsForCall(i int) (string, int, int) {
	fake.addReleaseDependencyMutex.RLock()
	defer fake.addReleaseDependencyMutex.RUnlock()
	argsForCall := fake.addReleaseDependencyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePivnetClient) AddReleaseDependencyReturns(result1 error) {
	fake.addReleaseDependencyMutex.Lock()
	defer fake.addReleaseDependencyMutex.Unlock()
	fake.AddReleaseDependencyStub = nil
	fake.addReleaseDependencyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePivnetClient) AddReleaseDependencyReturnsOnCall(i int, result1 error) {
	fake.addReleaseDependencyMutex.Lock()
	defer fake.addReleaseDependencyMutex.Unlock()
	fake.AddReleaseDependencyStub = nil
	if fake.addReleaseDependencyReturnsOnCall == nil {
		fake.addReleaseDependencyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReleaseDependencyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePivnetClient) ReleaseDependencies(arg1 string, arg2 int) ([]pivnet.ReleaseDependency, error) {
	fake.releaseDependenciesMutex.Lock()
	ret, specificReturn := fake.releaseDependenciesReturnsOnCall[len(fake.releaseDependenciesArgsForCall)]
	fake.releaseDependenciesArgsForCall = append(fake.releaseDependenciesArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("ReleaseDependencies", []interface{}{arg1, arg2})
	fake.releaseDependenciesMutex.Unlock()
	if fake.ReleaseDependenciesStub != nil {
		return fake.ReleaseDependenciesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.releaseDependenciesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePivnetClient) ReleaseDependenciesCallCount() int {
	fake.releaseDependenciesMutex.RLock()
	defer fake.releaseDependenciesMutex.RUnlock()
	return len(fake.releaseDependenciesArgsForCall)
}

func (fake *FakePivnetClient) ReleaseDependenciesCalls(stub func(string, int) ([]pivnet.ReleaseDependency, error)) {
	fake.releaseDependenciesMutex.Lock()
	defer fake.releaseDependenciesMutex.Unlock()
	fake.ReleaseDependenciesStub = stub
}

func (fake *FakePivnetClient) ReleaseDependenciesArgsForCall(i int) (string, int) {
	fake.releaseDependenciesMutex.RLock()
	defer fake.releaseDependenciesMutex.RUnlock()
	argsForCall := fake.releaseDependenciesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePivnetClient) ReleaseDependenciesReturns(result1 []pivnet.ReleaseDependency, result2 error) {
	fake.releaseDependenciesMutex.Lock()
	defer fake.releaseDependenciesMutex.Unlock()
	fake.ReleaseDependenciesStub = nil
	fake.releaseDependenciesReturns = struct {
		result1 []pivnet.ReleaseDependency
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) ReleaseDependenciesReturnsOnCall(i int, result1 []pivnet.ReleaseDependency, result2 error) {
	fake.releaseDependenciesMutex.Lock()
	defer fake.releaseDependenciesMutex.Unlock()
	fake.ReleaseDependenciesStub = nil
	if fake.releaseDependenciesReturnsOnCall == nil {
		fake.releaseDependenciesReturnsOnCall = make(map[int]struct {
			result1 []pivnet.ReleaseDependency
			result2 error
		})
	}
	fake.releaseDependenciesReturnsOnCall[i] = struct {
		result1 []pivnet.ReleaseDependency
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) ReleaseForVersion(arg1 string, arg2 string) (pivnet.Release, error) {
	fake.releaseForVersionMutex.Lock()
	ret, specificReturn := fake.releaseForVersionReturnsOnCall[len(fake.releaseForVersionArgsForCall)]
	fake.releaseForVersionArgsForCall = append(fake.releaseForVersionArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ReleaseForVersion", []interface{}{arg1, arg2})
	fake.releaseForVersionMutex.Unlock()
	if fake.ReleaseForVersionStub != nil {
		return fake.ReleaseForVersionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.releaseForVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePivnetClient) ReleaseForVersionCallCount() int {
	fake.releaseForVersionMutex.RLock()
	defer fake.releaseForVersionMutex.RUnlock()
	return len(fake.releaseForVersionArgsForCall)
}

func (fake *FakePivnetClient) ReleaseForVersionCalls(stub func(string, string) (pivnet.Release, error)) {
	fake.releaseForVersionMutex.Lock()
	defer fake.releaseForVersionMutex.Unlock()
	fake.ReleaseForVersionStub = stub
}

func (fake *FakePivnetClient) ReleaseForVersionArgsForCall(i int) (string, string) {
	fake.releaseForVersionMutex.RLock()
	defer fake.releaseForVersionMutex.RUnlock()
	argsForCall := fake.releaseForVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePivnetClient) ReleaseForVersionReturns(result1 pivnet.Release, result2 error) {
	fake.releaseForVersionMutex.Lock()
	defer fake.releaseForVersionMutex.Unlock()
	fake.ReleaseForVersionStub = nil
	fake.releaseForVersionReturns = struct {
		result1 pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) ReleaseForVersionReturnsOnCall(i int, result1 pivnet.Release, result2 error) {
	fake.releaseForVersionMutex.Lock()
	defer fake.releaseForVersionMutex.Unlock()
	fake.ReleaseForVersionStub = nil
	if fake.releaseForVersionReturnsOnCall == nil {
		fake.releaseForVersionReturnsOnCall = make(map[int]struct {
			result1 pivnet.Release
			result2 error
		})
	}
	fake.releaseForVersionReturnsOnCall[i] = struct {
		result1 pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) RemoveReleaseDependency(arg1 string, arg2 int, arg3 int) error {
	fake.removeReleaseDependencyMutex.Lock()
	ret, specificReturn := fake.removeReleaseDependencyReturnsOnCall[len(fake.removeReleaseDependencyArgsForCall)]
	fake.removeReleaseDependencyArgsForCall = append(fake.removeReleaseDependencyArgsForCall, struct {
		arg1 string
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveReleaseDependency", []interface{}{arg1, arg2, arg3})
	fake.removeReleaseDependencyMutex.Unlock()
	if fake.RemoveReleaseDependencyStub != nil {
		return fake.RemoveReleaseDependencyStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeReleaseDependencyReturns
	return fakeReturns.result1
}

func (fake *FakePivnetClient) RemoveReleaseDependencyCallCount() int {
	fake.removeReleaseDependencyMutex.RLock()
	defer fake.removeReleaseDependencyMutex.RUnlock()
	return len(fake.removeReleaseDependencyArgsForCall)
}

func (fake *FakePivnetClient) RemoveReleaseDependencyCalls(stub func(string, int, int) error) {
	fake.removeReleaseDependencyMutex.Lock()
	defer fake.removeReleaseDependencyMutex.Unlock()
	fake.RemoveReleaseDependencyStub = stub
}

func (fake *FakePivnetClient) RemoveReleaseDependencyArgsForCall(i int) (string, int, int) {
	fake.removeReleaseDependencyMutex.RLock()
	defer fake.removeReleaseDependencyMutex.RUnlock()
	argsForCall := fake.removeReleaseDependencyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePivnetClient) RemoveReleaseDependencyReturns(result1 error) {
	fake.removeReleaseDependencyMutex.Lock()
	defer fake.removeReleaseDependencyMutex.Unlock()
	fake.RemoveReleaseDependencyStub = nil
	fake.removeReleaseDependencyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePivnetClient) RemoveReleaseDependencyReturnsOnCall(i int, result1 error) {
	fake.removeReleaseDependencyMutex.Lock()
	defer fake.removeReleaseDependencyMutex.Unlock()
	fake.RemoveReleaseDependencyStub = nil
	if fake.removeReleaseDependencyReturnsOnCall == nil {
		fake.removeReleaseDependencyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeReleaseDependencyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePivnetClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addReleaseDependencyMutex.RLock()
	defer fake.addReleaseDependencyMutex.RUnlock()
	fake.releaseDependenciesMutex.RLock()
	defer fake.releaseDependenciesMutex.RUnlock()
	fake.releaseForVersionMutex.RLock()
	defer fake.releaseForVersionMutex.RUnlock()
	fake.removeReleaseDependencyMutex.RLock()
	defer fake.removeReleaseDependencyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePivnetClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ releasedependency.PivnetClient = new(FakePivnetClient)
