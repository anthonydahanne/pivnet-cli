// Code generated by counterfeiter. DO NOT EDIT.
package productfilefakes

import (
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet/v2"
	"github.com/pivotal-cf/pivnet-cli/commands/productfile"
)

type FakeFilter struct {
	ProductFileKeysByGlobsStub        func(productFiles []pivnet.ProductFile, glob []string) ([]pivnet.ProductFile, error)
	productFileKeysByGlobsMutex       sync.RWMutex
	productFileKeysByGlobsArgsForCall []struct {
		productFiles []pivnet.ProductFile
		glob         []string
	}
	productFileKeysByGlobsReturns struct {
		result1 []pivnet.ProductFile
		result2 error
	}
	productFileKeysByGlobsReturnsOnCall map[int]struct {
		result1 []pivnet.ProductFile
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFilter) ProductFileKeysByGlobs(productFiles []pivnet.ProductFile, glob []string) ([]pivnet.ProductFile, error) {
	var productFilesCopy []pivnet.ProductFile
	if productFiles != nil {
		productFilesCopy = make([]pivnet.ProductFile, len(productFiles))
		copy(productFilesCopy, productFiles)
	}
	var globCopy []string
	if glob != nil {
		globCopy = make([]string, len(glob))
		copy(globCopy, glob)
	}
	fake.productFileKeysByGlobsMutex.Lock()
	ret, specificReturn := fake.productFileKeysByGlobsReturnsOnCall[len(fake.productFileKeysByGlobsArgsForCall)]
	fake.productFileKeysByGlobsArgsForCall = append(fake.productFileKeysByGlobsArgsForCall, struct {
		productFiles []pivnet.ProductFile
		glob         []string
	}{productFilesCopy, globCopy})
	fake.recordInvocation("ProductFileKeysByGlobs", []interface{}{productFilesCopy, globCopy})
	fake.productFileKeysByGlobsMutex.Unlock()
	if fake.ProductFileKeysByGlobsStub != nil {
		return fake.ProductFileKeysByGlobsStub(productFiles, glob)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.productFileKeysByGlobsReturns.result1, fake.productFileKeysByGlobsReturns.result2
}

func (fake *FakeFilter) ProductFileKeysByGlobsCallCount() int {
	fake.productFileKeysByGlobsMutex.RLock()
	defer fake.productFileKeysByGlobsMutex.RUnlock()
	return len(fake.productFileKeysByGlobsArgsForCall)
}

func (fake *FakeFilter) ProductFileKeysByGlobsArgsForCall(i int) ([]pivnet.ProductFile, []string) {
	fake.productFileKeysByGlobsMutex.RLock()
	defer fake.productFileKeysByGlobsMutex.RUnlock()
	return fake.productFileKeysByGlobsArgsForCall[i].productFiles, fake.productFileKeysByGlobsArgsForCall[i].glob
}

func (fake *FakeFilter) ProductFileKeysByGlobsReturns(result1 []pivnet.ProductFile, result2 error) {
	fake.ProductFileKeysByGlobsStub = nil
	fake.productFileKeysByGlobsReturns = struct {
		result1 []pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *FakeFilter) ProductFileKeysByGlobsReturnsOnCall(i int, result1 []pivnet.ProductFile, result2 error) {
	fake.ProductFileKeysByGlobsStub = nil
	if fake.productFileKeysByGlobsReturnsOnCall == nil {
		fake.productFileKeysByGlobsReturnsOnCall = make(map[int]struct {
			result1 []pivnet.ProductFile
			result2 error
		})
	}
	fake.productFileKeysByGlobsReturnsOnCall[i] = struct {
		result1 []pivnet.ProductFile
		result2 error
	}{result1, result2}
}

func (fake *FakeFilter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.productFileKeysByGlobsMutex.RLock()
	defer fake.productFileKeysByGlobsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFilter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ productfile.Filter = new(FakeFilter)
