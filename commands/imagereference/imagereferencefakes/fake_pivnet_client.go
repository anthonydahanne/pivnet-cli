// Code generated by counterfeiter. DO NOT EDIT.
package imagereferencefakes

import (
	"sync"

	"github.com/pivotal-cf/go-pivnet/v2"
	"github.com/pivotal-cf/pivnet-cli/commands/imagereference"
)

type FakePivnetClient struct {
	ImageReferencesStub        func(productSlug string) ([]pivnet.ImageReference, error)
	imageReferencesMutex       sync.RWMutex
	imageReferencesArgsForCall []struct {
		productSlug string
	}
	imageReferencesReturns struct {
		result1 []pivnet.ImageReference
		result2 error
	}
	imageReferencesReturnsOnCall map[int]struct {
		result1 []pivnet.ImageReference
		result2 error
	}
	ImageReferencesForReleaseStub        func(productSlug string, releaseID int) ([]pivnet.ImageReference, error)
	imageReferencesForReleaseMutex       sync.RWMutex
	imageReferencesForReleaseArgsForCall []struct {
		productSlug string
		releaseID   int
	}
	imageReferencesForReleaseReturns struct {
		result1 []pivnet.ImageReference
		result2 error
	}
	imageReferencesForReleaseReturnsOnCall map[int]struct {
		result1 []pivnet.ImageReference
		result2 error
	}
	ImageReferenceStub        func(productSlug string, imageReferenceID int) (pivnet.ImageReference, error)
	imageReferenceMutex       sync.RWMutex
	imageReferenceArgsForCall []struct {
		productSlug      string
		imageReferenceID int
	}
	imageReferenceReturns struct {
		result1 pivnet.ImageReference
		result2 error
	}
	imageReferenceReturnsOnCall map[int]struct {
		result1 pivnet.ImageReference
		result2 error
	}
	ImageReferenceForReleaseStub        func(productSlug string, releaseID int, imageReferenceID int) (pivnet.ImageReference, error)
	imageReferenceForReleaseMutex       sync.RWMutex
	imageReferenceForReleaseArgsForCall []struct {
		productSlug      string
		releaseID        int
		imageReferenceID int
	}
	imageReferenceForReleaseReturns struct {
		result1 pivnet.ImageReference
		result2 error
	}
	imageReferenceForReleaseReturnsOnCall map[int]struct {
		result1 pivnet.ImageReference
		result2 error
	}
	ReleaseForVersionStub        func(productSlug string, releaseVersion string) (pivnet.Release, error)
	releaseForVersionMutex       sync.RWMutex
	releaseForVersionArgsForCall []struct {
		productSlug    string
		releaseVersion string
	}
	releaseForVersionReturns struct {
		result1 pivnet.Release
		result2 error
	}
	releaseForVersionReturnsOnCall map[int]struct {
		result1 pivnet.Release
		result2 error
	}
	CreateImageReferenceStub        func(config pivnet.CreateImageReferenceConfig) (pivnet.ImageReference, error)
	createImageReferenceMutex       sync.RWMutex
	createImageReferenceArgsForCall []struct {
		config pivnet.CreateImageReferenceConfig
	}
	createImageReferenceReturns struct {
		result1 pivnet.ImageReference
		result2 error
	}
	createImageReferenceReturnsOnCall map[int]struct {
		result1 pivnet.ImageReference
		result2 error
	}
	DeleteImageReferenceStub        func(productSlug string, releaseID int) (pivnet.ImageReference, error)
	deleteImageReferenceMutex       sync.RWMutex
	deleteImageReferenceArgsForCall []struct {
		productSlug string
		releaseID   int
	}
	deleteImageReferenceReturns struct {
		result1 pivnet.ImageReference
		result2 error
	}
	deleteImageReferenceReturnsOnCall map[int]struct {
		result1 pivnet.ImageReference
		result2 error
	}
	AddImageReferenceToReleaseStub        func(productSlug string, imageReferenceID int, releaseID int) error
	addImageReferenceToReleaseMutex       sync.RWMutex
	addImageReferenceToReleaseArgsForCall []struct {
		productSlug      string
		imageReferenceID int
		releaseID        int
	}
	addImageReferenceToReleaseReturns struct {
		result1 error
	}
	addImageReferenceToReleaseReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveImageReferenceFromReleaseStub        func(productSlug string, imageReferenceID int, releaseID int) error
	removeImageReferenceFromReleaseMutex       sync.RWMutex
	removeImageReferenceFromReleaseArgsForCall []struct {
		productSlug      string
		imageReferenceID int
		releaseID        int
	}
	removeImageReferenceFromReleaseReturns struct {
		result1 error
	}
	removeImageReferenceFromReleaseReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePivnetClient) ImageReferences(productSlug string) ([]pivnet.ImageReference, error) {
	fake.imageReferencesMutex.Lock()
	ret, specificReturn := fake.imageReferencesReturnsOnCall[len(fake.imageReferencesArgsForCall)]
	fake.imageReferencesArgsForCall = append(fake.imageReferencesArgsForCall, struct {
		productSlug string
	}{productSlug})
	fake.recordInvocation("ImageReferences", []interface{}{productSlug})
	fake.imageReferencesMutex.Unlock()
	if fake.ImageReferencesStub != nil {
		return fake.ImageReferencesStub(productSlug)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.imageReferencesReturns.result1, fake.imageReferencesReturns.result2
}

func (fake *FakePivnetClient) ImageReferencesCallCount() int {
	fake.imageReferencesMutex.RLock()
	defer fake.imageReferencesMutex.RUnlock()
	return len(fake.imageReferencesArgsForCall)
}

func (fake *FakePivnetClient) ImageReferencesArgsForCall(i int) string {
	fake.imageReferencesMutex.RLock()
	defer fake.imageReferencesMutex.RUnlock()
	return fake.imageReferencesArgsForCall[i].productSlug
}

func (fake *FakePivnetClient) ImageReferencesReturns(result1 []pivnet.ImageReference, result2 error) {
	fake.ImageReferencesStub = nil
	fake.imageReferencesReturns = struct {
		result1 []pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) ImageReferencesReturnsOnCall(i int, result1 []pivnet.ImageReference, result2 error) {
	fake.ImageReferencesStub = nil
	if fake.imageReferencesReturnsOnCall == nil {
		fake.imageReferencesReturnsOnCall = make(map[int]struct {
			result1 []pivnet.ImageReference
			result2 error
		})
	}
	fake.imageReferencesReturnsOnCall[i] = struct {
		result1 []pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) ImageReferencesForRelease(productSlug string, releaseID int) ([]pivnet.ImageReference, error) {
	fake.imageReferencesForReleaseMutex.Lock()
	ret, specificReturn := fake.imageReferencesForReleaseReturnsOnCall[len(fake.imageReferencesForReleaseArgsForCall)]
	fake.imageReferencesForReleaseArgsForCall = append(fake.imageReferencesForReleaseArgsForCall, struct {
		productSlug string
		releaseID   int
	}{productSlug, releaseID})
	fake.recordInvocation("ImageReferencesForRelease", []interface{}{productSlug, releaseID})
	fake.imageReferencesForReleaseMutex.Unlock()
	if fake.ImageReferencesForReleaseStub != nil {
		return fake.ImageReferencesForReleaseStub(productSlug, releaseID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.imageReferencesForReleaseReturns.result1, fake.imageReferencesForReleaseReturns.result2
}

func (fake *FakePivnetClient) ImageReferencesForReleaseCallCount() int {
	fake.imageReferencesForReleaseMutex.RLock()
	defer fake.imageReferencesForReleaseMutex.RUnlock()
	return len(fake.imageReferencesForReleaseArgsForCall)
}

func (fake *FakePivnetClient) ImageReferencesForReleaseArgsForCall(i int) (string, int) {
	fake.imageReferencesForReleaseMutex.RLock()
	defer fake.imageReferencesForReleaseMutex.RUnlock()
	return fake.imageReferencesForReleaseArgsForCall[i].productSlug, fake.imageReferencesForReleaseArgsForCall[i].releaseID
}

func (fake *FakePivnetClient) ImageReferencesForReleaseReturns(result1 []pivnet.ImageReference, result2 error) {
	fake.ImageReferencesForReleaseStub = nil
	fake.imageReferencesForReleaseReturns = struct {
		result1 []pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) ImageReferencesForReleaseReturnsOnCall(i int, result1 []pivnet.ImageReference, result2 error) {
	fake.ImageReferencesForReleaseStub = nil
	if fake.imageReferencesForReleaseReturnsOnCall == nil {
		fake.imageReferencesForReleaseReturnsOnCall = make(map[int]struct {
			result1 []pivnet.ImageReference
			result2 error
		})
	}
	fake.imageReferencesForReleaseReturnsOnCall[i] = struct {
		result1 []pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) ImageReference(productSlug string, imageReferenceID int) (pivnet.ImageReference, error) {
	fake.imageReferenceMutex.Lock()
	ret, specificReturn := fake.imageReferenceReturnsOnCall[len(fake.imageReferenceArgsForCall)]
	fake.imageReferenceArgsForCall = append(fake.imageReferenceArgsForCall, struct {
		productSlug      string
		imageReferenceID int
	}{productSlug, imageReferenceID})
	fake.recordInvocation("ImageReference", []interface{}{productSlug, imageReferenceID})
	fake.imageReferenceMutex.Unlock()
	if fake.ImageReferenceStub != nil {
		return fake.ImageReferenceStub(productSlug, imageReferenceID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.imageReferenceReturns.result1, fake.imageReferenceReturns.result2
}

func (fake *FakePivnetClient) ImageReferenceCallCount() int {
	fake.imageReferenceMutex.RLock()
	defer fake.imageReferenceMutex.RUnlock()
	return len(fake.imageReferenceArgsForCall)
}

func (fake *FakePivnetClient) ImageReferenceArgsForCall(i int) (string, int) {
	fake.imageReferenceMutex.RLock()
	defer fake.imageReferenceMutex.RUnlock()
	return fake.imageReferenceArgsForCall[i].productSlug, fake.imageReferenceArgsForCall[i].imageReferenceID
}

func (fake *FakePivnetClient) ImageReferenceReturns(result1 pivnet.ImageReference, result2 error) {
	fake.ImageReferenceStub = nil
	fake.imageReferenceReturns = struct {
		result1 pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) ImageReferenceReturnsOnCall(i int, result1 pivnet.ImageReference, result2 error) {
	fake.ImageReferenceStub = nil
	if fake.imageReferenceReturnsOnCall == nil {
		fake.imageReferenceReturnsOnCall = make(map[int]struct {
			result1 pivnet.ImageReference
			result2 error
		})
	}
	fake.imageReferenceReturnsOnCall[i] = struct {
		result1 pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) ImageReferenceForRelease(productSlug string, releaseID int, imageReferenceID int) (pivnet.ImageReference, error) {
	fake.imageReferenceForReleaseMutex.Lock()
	ret, specificReturn := fake.imageReferenceForReleaseReturnsOnCall[len(fake.imageReferenceForReleaseArgsForCall)]
	fake.imageReferenceForReleaseArgsForCall = append(fake.imageReferenceForReleaseArgsForCall, struct {
		productSlug      string
		releaseID        int
		imageReferenceID int
	}{productSlug, releaseID, imageReferenceID})
	fake.recordInvocation("ImageReferenceForRelease", []interface{}{productSlug, releaseID, imageReferenceID})
	fake.imageReferenceForReleaseMutex.Unlock()
	if fake.ImageReferenceForReleaseStub != nil {
		return fake.ImageReferenceForReleaseStub(productSlug, releaseID, imageReferenceID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.imageReferenceForReleaseReturns.result1, fake.imageReferenceForReleaseReturns.result2
}

func (fake *FakePivnetClient) ImageReferenceForReleaseCallCount() int {
	fake.imageReferenceForReleaseMutex.RLock()
	defer fake.imageReferenceForReleaseMutex.RUnlock()
	return len(fake.imageReferenceForReleaseArgsForCall)
}

func (fake *FakePivnetClient) ImageReferenceForReleaseArgsForCall(i int) (string, int, int) {
	fake.imageReferenceForReleaseMutex.RLock()
	defer fake.imageReferenceForReleaseMutex.RUnlock()
	return fake.imageReferenceForReleaseArgsForCall[i].productSlug, fake.imageReferenceForReleaseArgsForCall[i].releaseID, fake.imageReferenceForReleaseArgsForCall[i].imageReferenceID
}

func (fake *FakePivnetClient) ImageReferenceForReleaseReturns(result1 pivnet.ImageReference, result2 error) {
	fake.ImageReferenceForReleaseStub = nil
	fake.imageReferenceForReleaseReturns = struct {
		result1 pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) ImageReferenceForReleaseReturnsOnCall(i int, result1 pivnet.ImageReference, result2 error) {
	fake.ImageReferenceForReleaseStub = nil
	if fake.imageReferenceForReleaseReturnsOnCall == nil {
		fake.imageReferenceForReleaseReturnsOnCall = make(map[int]struct {
			result1 pivnet.ImageReference
			result2 error
		})
	}
	fake.imageReferenceForReleaseReturnsOnCall[i] = struct {
		result1 pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) ReleaseForVersion(productSlug string, releaseVersion string) (pivnet.Release, error) {
	fake.releaseForVersionMutex.Lock()
	ret, specificReturn := fake.releaseForVersionReturnsOnCall[len(fake.releaseForVersionArgsForCall)]
	fake.releaseForVersionArgsForCall = append(fake.releaseForVersionArgsForCall, struct {
		productSlug    string
		releaseVersion string
	}{productSlug, releaseVersion})
	fake.recordInvocation("ReleaseForVersion", []interface{}{productSlug, releaseVersion})
	fake.releaseForVersionMutex.Unlock()
	if fake.ReleaseForVersionStub != nil {
		return fake.ReleaseForVersionStub(productSlug, releaseVersion)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.releaseForVersionReturns.result1, fake.releaseForVersionReturns.result2
}

func (fake *FakePivnetClient) ReleaseForVersionCallCount() int {
	fake.releaseForVersionMutex.RLock()
	defer fake.releaseForVersionMutex.RUnlock()
	return len(fake.releaseForVersionArgsForCall)
}

func (fake *FakePivnetClient) ReleaseForVersionArgsForCall(i int) (string, string) {
	fake.releaseForVersionMutex.RLock()
	defer fake.releaseForVersionMutex.RUnlock()
	return fake.releaseForVersionArgsForCall[i].productSlug, fake.releaseForVersionArgsForCall[i].releaseVersion
}

func (fake *FakePivnetClient) ReleaseForVersionReturns(result1 pivnet.Release, result2 error) {
	fake.ReleaseForVersionStub = nil
	fake.releaseForVersionReturns = struct {
		result1 pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) ReleaseForVersionReturnsOnCall(i int, result1 pivnet.Release, result2 error) {
	fake.ReleaseForVersionStub = nil
	if fake.releaseForVersionReturnsOnCall == nil {
		fake.releaseForVersionReturnsOnCall = make(map[int]struct {
			result1 pivnet.Release
			result2 error
		})
	}
	fake.releaseForVersionReturnsOnCall[i] = struct {
		result1 pivnet.Release
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) CreateImageReference(config pivnet.CreateImageReferenceConfig) (pivnet.ImageReference, error) {
	fake.createImageReferenceMutex.Lock()
	ret, specificReturn := fake.createImageReferenceReturnsOnCall[len(fake.createImageReferenceArgsForCall)]
	fake.createImageReferenceArgsForCall = append(fake.createImageReferenceArgsForCall, struct {
		config pivnet.CreateImageReferenceConfig
	}{config})
	fake.recordInvocation("CreateImageReference", []interface{}{config})
	fake.createImageReferenceMutex.Unlock()
	if fake.CreateImageReferenceStub != nil {
		return fake.CreateImageReferenceStub(config)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createImageReferenceReturns.result1, fake.createImageReferenceReturns.result2
}

func (fake *FakePivnetClient) CreateImageReferenceCallCount() int {
	fake.createImageReferenceMutex.RLock()
	defer fake.createImageReferenceMutex.RUnlock()
	return len(fake.createImageReferenceArgsForCall)
}

func (fake *FakePivnetClient) CreateImageReferenceArgsForCall(i int) pivnet.CreateImageReferenceConfig {
	fake.createImageReferenceMutex.RLock()
	defer fake.createImageReferenceMutex.RUnlock()
	return fake.createImageReferenceArgsForCall[i].config
}

func (fake *FakePivnetClient) CreateImageReferenceReturns(result1 pivnet.ImageReference, result2 error) {
	fake.CreateImageReferenceStub = nil
	fake.createImageReferenceReturns = struct {
		result1 pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) CreateImageReferenceReturnsOnCall(i int, result1 pivnet.ImageReference, result2 error) {
	fake.CreateImageReferenceStub = nil
	if fake.createImageReferenceReturnsOnCall == nil {
		fake.createImageReferenceReturnsOnCall = make(map[int]struct {
			result1 pivnet.ImageReference
			result2 error
		})
	}
	fake.createImageReferenceReturnsOnCall[i] = struct {
		result1 pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) DeleteImageReference(productSlug string, releaseID int) (pivnet.ImageReference, error) {
	fake.deleteImageReferenceMutex.Lock()
	ret, specificReturn := fake.deleteImageReferenceReturnsOnCall[len(fake.deleteImageReferenceArgsForCall)]
	fake.deleteImageReferenceArgsForCall = append(fake.deleteImageReferenceArgsForCall, struct {
		productSlug string
		releaseID   int
	}{productSlug, releaseID})
	fake.recordInvocation("DeleteImageReference", []interface{}{productSlug, releaseID})
	fake.deleteImageReferenceMutex.Unlock()
	if fake.DeleteImageReferenceStub != nil {
		return fake.DeleteImageReferenceStub(productSlug, releaseID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteImageReferenceReturns.result1, fake.deleteImageReferenceReturns.result2
}

func (fake *FakePivnetClient) DeleteImageReferenceCallCount() int {
	fake.deleteImageReferenceMutex.RLock()
	defer fake.deleteImageReferenceMutex.RUnlock()
	return len(fake.deleteImageReferenceArgsForCall)
}

func (fake *FakePivnetClient) DeleteImageReferenceArgsForCall(i int) (string, int) {
	fake.deleteImageReferenceMutex.RLock()
	defer fake.deleteImageReferenceMutex.RUnlock()
	return fake.deleteImageReferenceArgsForCall[i].productSlug, fake.deleteImageReferenceArgsForCall[i].releaseID
}

func (fake *FakePivnetClient) DeleteImageReferenceReturns(result1 pivnet.ImageReference, result2 error) {
	fake.DeleteImageReferenceStub = nil
	fake.deleteImageReferenceReturns = struct {
		result1 pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) DeleteImageReferenceReturnsOnCall(i int, result1 pivnet.ImageReference, result2 error) {
	fake.DeleteImageReferenceStub = nil
	if fake.deleteImageReferenceReturnsOnCall == nil {
		fake.deleteImageReferenceReturnsOnCall = make(map[int]struct {
			result1 pivnet.ImageReference
			result2 error
		})
	}
	fake.deleteImageReferenceReturnsOnCall[i] = struct {
		result1 pivnet.ImageReference
		result2 error
	}{result1, result2}
}

func (fake *FakePivnetClient) AddImageReferenceToRelease(productSlug string, imageReferenceID int, releaseID int) error {
	fake.addImageReferenceToReleaseMutex.Lock()
	ret, specificReturn := fake.addImageReferenceToReleaseReturnsOnCall[len(fake.addImageReferenceToReleaseArgsForCall)]
	fake.addImageReferenceToReleaseArgsForCall = append(fake.addImageReferenceToReleaseArgsForCall, struct {
		productSlug      string
		imageReferenceID int
		releaseID        int
	}{productSlug, imageReferenceID, releaseID})
	fake.recordInvocation("AddImageReferenceToRelease", []interface{}{productSlug, imageReferenceID, releaseID})
	fake.addImageReferenceToReleaseMutex.Unlock()
	if fake.AddImageReferenceToReleaseStub != nil {
		return fake.AddImageReferenceToReleaseStub(productSlug, imageReferenceID, releaseID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.addImageReferenceToReleaseReturns.result1
}

func (fake *FakePivnetClient) AddImageReferenceToReleaseCallCount() int {
	fake.addImageReferenceToReleaseMutex.RLock()
	defer fake.addImageReferenceToReleaseMutex.RUnlock()
	return len(fake.addImageReferenceToReleaseArgsForCall)
}

func (fake *FakePivnetClient) AddImageReferenceToReleaseArgsForCall(i int) (string, int, int) {
	fake.addImageReferenceToReleaseMutex.RLock()
	defer fake.addImageReferenceToReleaseMutex.RUnlock()
	return fake.addImageReferenceToReleaseArgsForCall[i].productSlug, fake.addImageReferenceToReleaseArgsForCall[i].imageReferenceID, fake.addImageReferenceToReleaseArgsForCall[i].releaseID
}

func (fake *FakePivnetClient) AddImageReferenceToReleaseReturns(result1 error) {
	fake.AddImageReferenceToReleaseStub = nil
	fake.addImageReferenceToReleaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePivnetClient) AddImageReferenceToReleaseReturnsOnCall(i int, result1 error) {
	fake.AddImageReferenceToReleaseStub = nil
	if fake.addImageReferenceToReleaseReturnsOnCall == nil {
		fake.addImageReferenceToReleaseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addImageReferenceToReleaseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePivnetClient) RemoveImageReferenceFromRelease(productSlug string, imageReferenceID int, releaseID int) error {
	fake.removeImageReferenceFromReleaseMutex.Lock()
	ret, specificReturn := fake.removeImageReferenceFromReleaseReturnsOnCall[len(fake.removeImageReferenceFromReleaseArgsForCall)]
	fake.removeImageReferenceFromReleaseArgsForCall = append(fake.removeImageReferenceFromReleaseArgsForCall, struct {
		productSlug      string
		imageReferenceID int
		releaseID        int
	}{productSlug, imageReferenceID, releaseID})
	fake.recordInvocation("RemoveImageReferenceFromRelease", []interface{}{productSlug, imageReferenceID, releaseID})
	fake.removeImageReferenceFromReleaseMutex.Unlock()
	if fake.RemoveImageReferenceFromReleaseStub != nil {
		return fake.RemoveImageReferenceFromReleaseStub(productSlug, imageReferenceID, releaseID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.removeImageReferenceFromReleaseReturns.result1
}

func (fake *FakePivnetClient) RemoveImageReferenceFromReleaseCallCount() int {
	fake.removeImageReferenceFromReleaseMutex.RLock()
	defer fake.removeImageReferenceFromReleaseMutex.RUnlock()
	return len(fake.removeImageReferenceFromReleaseArgsForCall)
}

func (fake *FakePivnetClient) RemoveImageReferenceFromReleaseArgsForCall(i int) (string, int, int) {
	fake.removeImageReferenceFromReleaseMutex.RLock()
	defer fake.removeImageReferenceFromReleaseMutex.RUnlock()
	return fake.removeImageReferenceFromReleaseArgsForCall[i].productSlug, fake.removeImageReferenceFromReleaseArgsForCall[i].imageReferenceID, fake.removeImageReferenceFromReleaseArgsForCall[i].releaseID
}

func (fake *FakePivnetClient) RemoveImageReferenceFromReleaseReturns(result1 error) {
	fake.RemoveImageReferenceFromReleaseStub = nil
	fake.removeImageReferenceFromReleaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePivnetClient) RemoveImageReferenceFromReleaseReturnsOnCall(i int, result1 error) {
	fake.RemoveImageReferenceFromReleaseStub = nil
	if fake.removeImageReferenceFromReleaseReturnsOnCall == nil {
		fake.removeImageReferenceFromReleaseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeImageReferenceFromReleaseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePivnetClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.imageReferencesMutex.RLock()
	defer fake.imageReferencesMutex.RUnlock()
	fake.imageReferencesForReleaseMutex.RLock()
	defer fake.imageReferencesForReleaseMutex.RUnlock()
	fake.imageReferenceMutex.RLock()
	defer fake.imageReferenceMutex.RUnlock()
	fake.imageReferenceForReleaseMutex.RLock()
	defer fake.imageReferenceForReleaseMutex.RUnlock()
	fake.releaseForVersionMutex.RLock()
	defer fake.releaseForVersionMutex.RUnlock()
	fake.createImageReferenceMutex.RLock()
	defer fake.createImageReferenceMutex.RUnlock()
	fake.deleteImageReferenceMutex.RLock()
	defer fake.deleteImageReferenceMutex.RUnlock()
	fake.addImageReferenceToReleaseMutex.RLock()
	defer fake.addImageReferenceToReleaseMutex.RUnlock()
	fake.removeImageReferenceFromReleaseMutex.RLock()
	defer fake.removeImageReferenceFromReleaseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePivnetClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ imagereference.PivnetClient = new(FakePivnetClient)
