// Code generated by counterfeiter. DO NOT EDIT.
package commandsfakes

import (
	"sync"

	"github.com/pivotal-cf/pivnet-cli/v2/commands"
	"github.com/pivotal-cf/pivnet-cli/v2/rc"
)

type FakeRCHandler struct {
	ProfileForNameStub        func(string) (*rc.PivnetProfile, error)
	profileForNameMutex       sync.RWMutex
	profileForNameArgsForCall []struct {
		arg1 string
	}
	profileForNameReturns struct {
		result1 *rc.PivnetProfile
		result2 error
	}
	profileForNameReturnsOnCall map[int]struct {
		result1 *rc.PivnetProfile
		result2 error
	}
	RemoveProfileWithNameStub        func(string) error
	removeProfileWithNameMutex       sync.RWMutex
	removeProfileWithNameArgsForCall []struct {
		arg1 string
	}
	removeProfileWithNameReturns struct {
		result1 error
	}
	removeProfileWithNameReturnsOnCall map[int]struct {
		result1 error
	}
	SaveProfileStub        func(string, string, string, string, int64) error
	saveProfileMutex       sync.RWMutex
	saveProfileArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 int64
	}
	saveProfileReturns struct {
		result1 error
	}
	saveProfileReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRCHandler) ProfileForName(arg1 string) (*rc.PivnetProfile, error) {
	fake.profileForNameMutex.Lock()
	ret, specificReturn := fake.profileForNameReturnsOnCall[len(fake.profileForNameArgsForCall)]
	fake.profileForNameArgsForCall = append(fake.profileForNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ProfileForName", []interface{}{arg1})
	fake.profileForNameMutex.Unlock()
	if fake.ProfileForNameStub != nil {
		return fake.ProfileForNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.profileForNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRCHandler) ProfileForNameCallCount() int {
	fake.profileForNameMutex.RLock()
	defer fake.profileForNameMutex.RUnlock()
	return len(fake.profileForNameArgsForCall)
}

func (fake *FakeRCHandler) ProfileForNameCalls(stub func(string) (*rc.PivnetProfile, error)) {
	fake.profileForNameMutex.Lock()
	defer fake.profileForNameMutex.Unlock()
	fake.ProfileForNameStub = stub
}

func (fake *FakeRCHandler) ProfileForNameArgsForCall(i int) string {
	fake.profileForNameMutex.RLock()
	defer fake.profileForNameMutex.RUnlock()
	argsForCall := fake.profileForNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRCHandler) ProfileForNameReturns(result1 *rc.PivnetProfile, result2 error) {
	fake.profileForNameMutex.Lock()
	defer fake.profileForNameMutex.Unlock()
	fake.ProfileForNameStub = nil
	fake.profileForNameReturns = struct {
		result1 *rc.PivnetProfile
		result2 error
	}{result1, result2}
}

func (fake *FakeRCHandler) ProfileForNameReturnsOnCall(i int, result1 *rc.PivnetProfile, result2 error) {
	fake.profileForNameMutex.Lock()
	defer fake.profileForNameMutex.Unlock()
	fake.ProfileForNameStub = nil
	if fake.profileForNameReturnsOnCall == nil {
		fake.profileForNameReturnsOnCall = make(map[int]struct {
			result1 *rc.PivnetProfile
			result2 error
		})
	}
	fake.profileForNameReturnsOnCall[i] = struct {
		result1 *rc.PivnetProfile
		result2 error
	}{result1, result2}
}

func (fake *FakeRCHandler) RemoveProfileWithName(arg1 string) error {
	fake.removeProfileWithNameMutex.Lock()
	ret, specificReturn := fake.removeProfileWithNameReturnsOnCall[len(fake.removeProfileWithNameArgsForCall)]
	fake.removeProfileWithNameArgsForCall = append(fake.removeProfileWithNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RemoveProfileWithName", []interface{}{arg1})
	fake.removeProfileWithNameMutex.Unlock()
	if fake.RemoveProfileWithNameStub != nil {
		return fake.RemoveProfileWithNameStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeProfileWithNameReturns
	return fakeReturns.result1
}

func (fake *FakeRCHandler) RemoveProfileWithNameCallCount() int {
	fake.removeProfileWithNameMutex.RLock()
	defer fake.removeProfileWithNameMutex.RUnlock()
	return len(fake.removeProfileWithNameArgsForCall)
}

func (fake *FakeRCHandler) RemoveProfileWithNameCalls(stub func(string) error) {
	fake.removeProfileWithNameMutex.Lock()
	defer fake.removeProfileWithNameMutex.Unlock()
	fake.RemoveProfileWithNameStub = stub
}

func (fake *FakeRCHandler) RemoveProfileWithNameArgsForCall(i int) string {
	fake.removeProfileWithNameMutex.RLock()
	defer fake.removeProfileWithNameMutex.RUnlock()
	argsForCall := fake.removeProfileWithNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRCHandler) RemoveProfileWithNameReturns(result1 error) {
	fake.removeProfileWithNameMutex.Lock()
	defer fake.removeProfileWithNameMutex.Unlock()
	fake.RemoveProfileWithNameStub = nil
	fake.removeProfileWithNameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRCHandler) RemoveProfileWithNameReturnsOnCall(i int, result1 error) {
	fake.removeProfileWithNameMutex.Lock()
	defer fake.removeProfileWithNameMutex.Unlock()
	fake.RemoveProfileWithNameStub = nil
	if fake.removeProfileWithNameReturnsOnCall == nil {
		fake.removeProfileWithNameReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeProfileWithNameReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRCHandler) SaveProfile(arg1 string, arg2 string, arg3 string, arg4 string, arg5 int64) error {
	fake.saveProfileMutex.Lock()
	ret, specificReturn := fake.saveProfileReturnsOnCall[len(fake.saveProfileArgsForCall)]
	fake.saveProfileArgsForCall = append(fake.saveProfileArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 int64
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("SaveProfile", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.saveProfileMutex.Unlock()
	if fake.SaveProfileStub != nil {
		return fake.SaveProfileStub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.saveProfileReturns
	return fakeReturns.result1
}

func (fake *FakeRCHandler) SaveProfileCallCount() int {
	fake.saveProfileMutex.RLock()
	defer fake.saveProfileMutex.RUnlock()
	return len(fake.saveProfileArgsForCall)
}

func (fake *FakeRCHandler) SaveProfileCalls(stub func(string, string, string, string, int64) error) {
	fake.saveProfileMutex.Lock()
	defer fake.saveProfileMutex.Unlock()
	fake.SaveProfileStub = stub
}

func (fake *FakeRCHandler) SaveProfileArgsForCall(i int) (string, string, string, string, int64) {
	fake.saveProfileMutex.RLock()
	defer fake.saveProfileMutex.RUnlock()
	argsForCall := fake.saveProfileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeRCHandler) SaveProfileReturns(result1 error) {
	fake.saveProfileMutex.Lock()
	defer fake.saveProfileMutex.Unlock()
	fake.SaveProfileStub = nil
	fake.saveProfileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRCHandler) SaveProfileReturnsOnCall(i int, result1 error) {
	fake.saveProfileMutex.Lock()
	defer fake.saveProfileMutex.Unlock()
	fake.SaveProfileStub = nil
	if fake.saveProfileReturnsOnCall == nil {
		fake.saveProfileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveProfileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRCHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.profileForNameMutex.RLock()
	defer fake.profileForNameMutex.RUnlock()
	fake.removeProfileWithNameMutex.RLock()
	defer fake.removeProfileWithNameMutex.RUnlock()
	fake.saveProfileMutex.RLock()
	defer fake.saveProfileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRCHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.RCHandler = new(FakeRCHandler)
